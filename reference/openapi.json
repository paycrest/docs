{
  "openapi" : "3.0.0",
  "info" : {
    "version" : "0.1.0",
    "title" : "Paycrest Protocol API",
    "description" : "A crypto-to-fiat protocol",
    "termsOfService" : "https://paycrest.io/terms/",
    "contact" : {
      "name" : "API Support",
      "url" : "https://support.paycrest.io",
      "email" : "support@paycrest.io"
    }
  },
  "servers" : [ {
    "description" : "Paycrest Protocol V1 API",
    "url" : "https://api.paycrest.io/v1"
  } ],
  "tags" : [ {
    "name" : "Sender",
    "description" : "Endpoints related to Senders"
  }, {
    "name" : "Provider",
    "description" : "Endpoints related to Providers"
  }, {
    "name" : "Misc",
    "description" : "Endpoints related to functionalities that has to do with rate, institutions and currencies"
  } ],
  "paths" : {
    "/sender/orders" : {
      "post" : {
        "tags" : [ "Sender" ],
        "summary" : "Create a new order for sending crypto to fiat",
        "description" : "This endpoint allows you to create a new order for sending \ncryptocurrency to a fiat currency. You need to provide the necessary \ninformation such as the amount of cryptocurrency to be exchanged, \nthe cryptocurrency address, and the fiat currency code. \nThis endpoint also returns a receive address for the cryptocurrency.\n",
        "security" : [ {
          "api_key" : [ ]
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewOrder"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "The order has been successfully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "type" : "string",
                      "description" : "The ID of the initiated order"
                    },
                    "amount" : {
                      "type" : "number",
                      "description" : "The amount of the token being transferred"
                    },
                    "network" : {
                      "type" : "string",
                      "description" : "The blockchain network of the token",
                      "enum" : [ "polygon", "bnb-smart-chain", "arbitrum", "base" ]
                    },
                    "receiveAddress" : {
                      "type" : "string",
                      "description" : "The receive address for the cryptocurrency"
                    },
                    "validUntil" : {
                      "type" : "string",
                      "description" : "The receive address is valid until this time"
                    }
                  },
                  "example" : {
                    "status" : "success",
                    "data" : {
                      "id" : "123456",
                      "amount" : 2500,
                      "network" : "polygon",
                      "receiveAddress" : "0xA8c8...2F2B",
                      "validUntil" : "2023-03-30T08:00:00Z"
                    },
                    "message" : "Order has been initiated successfully"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request body is invalid"
          },
          "401" : {
            "$ref" : "#/components/responses/UnauthorizedError"
          },
          "500" : {
            "description" : "An internal server error has occurred"
          }
        }
      },

      "get" : {
        "tags" : [ "Sender" ],
        "summary" : "Gets all orders for a sender (filtered).",
        "description" : "This endpoint returns all orders made by a sender. Path based query parameters like pageSize, \nordering (asc or desc), and page can be used to filter specific orders. If no filter is specified,\nall orders will be returned.\n",
        "security" : [ {
          "api_key" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "The order has been successfully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "total" : {
                      "type" : "number",
                      "description" : "The total number of orders currently returned"
                    },
                    "page" : {
                      "type" : "number",
                      "description" : "The current page based on data pagination"
                    },
                    "pageSize" : {
                      "type" : "number",
                      "description" : "The maximum number of orders returned"
                    },
                    "orders" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/Order"
                      },
                      "description" : "An array of the orders"
                    }
                  },
                  "example" : {
                    "status" : "success",
                    "data" : {
                      "total" : 6,
                      "page" : 1,
                      "pageSize" : 10,
                      "orders" : [ {
                        "id" : 11,
                        "amount" : 250.0,
                        "token" : "USDC",
                        "rate" : 785.9,
                        "network" : "optimism",
                        "createdAt" : "2023-02-15T19:53:05.469103Z",
                        "updatedAt" : "2023-02-15T19:53:05.469103Z",
                        "txHash" : "0x2aa...356",
                        "status" : "pending",
                        "recipient" : {
                          "institution" : "GBLANG",
                          "accountIdentifier" : "0984324562",
                          "accountName" : "James Doe",
                          "providerId" : null,
                          "memo" : "Charity donation"
                        }
                      }, {
                        "id" : 12,
                        "amount" : 350.0,
                        "token" : "USDC",
                        "rate" : 785.4,
                        "network" : "polygon",
                        "createdAt" : "2023-02-15T19:53:05.469103Z",
                        "updatedAt" : "2023-02-15T19:53:05.469103Z",
                        "txHash" : "0x1aa...356",
                        "status" : "fufilled",
                        "recipient" : {
                          "institution" : "GBLANG",
                          "accountIdentifier" : 4324562098,
                          "accountName" : "John Doe",
                          "providerId" : null,
                          "memo" : "Car Payment"
                        }
                      } ]
                    },
                    "message" : "Payment orders retrieved successfully"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request body is invalid"
          },
          "401" : {
            "$ref" : "#/components/responses/UnauthorizedError"
          },
          "500" : {
            "description" : "An internal server error has occurred"
          }
        }
      }
    },
    "/sender/orders/{id}" : {
      "get" : {
        "tags" : [ "Sender" ],
        "summary" : "Retrieves a payment order by id",
        "description" : "Retrieves a payment order by id",
        "operationId" : "getPaymentOrderByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the order to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "security" : [ {
          "api_key" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "The order has been successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "type" : "string"
                    },
                    "amount" : {
                      "type" : "number",
                      "format" : "decimal"
                    },
                    "token" : {
                      "type" : "string"
                    },
                    "rate" : {
                      "type" : "number",
                      "format" : "decimal"
                    },
                    "network" : {
                      "type" : "string"
                    },
                    "recipient" : {
                      "$ref" : "#/components/schemas/PaymentOrderRecipient"
                    },
                    "createdAt" : {
                      "type" : "string",
                      "format" : "date-time"
                    },
                    "updatedAt" : {
                      "type" : "string",
                      "format" : "date-time"
                    },
                    "txHash" : {
                      "type" : "string"
                    },
                    "status" : {
                      "$ref" : "#/components/schemas/Status"
                    }
                  },
                  "example" : {
                    "status" : "success",
                    "data" : {
                      "id" : "145456",
                      "amount" : 1200.0,
                      "token" : "USDC",
                      "rate" : 780.5,
                      "network" : "polygon",
                      "recipient" : {
                        "institution" : "GBLNGA",
                        "accountIdentifier" : "01358693827",
                        "accountName" : "James Doe",
                        "providerId" : "DCFFX12",
                        "memo" : "From Charles for June house rent"
                      },
                      "createdAt" : "2023-03-30T08:00:00Z",
                      "updatedAt" : "2023-03-30T08:00:00Z",
                      "txHash" : "0xe1c...213",
                      "status" : "pending"
                    },
                    "message" : "The order has been successfully retrieved"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "422" : {
            "description" : "Something went wrong!"
          },
          "401" : {
            "$ref" : "#/components/responses/UnauthorizedError"
          },
          "404" : {
            "description" : "The order with the specified ID was not found"
          }
        }
      }
    },
    "/provider/orders/{id}" : {
      "get" : {
        "tags" : [ "Provider" ],
        "summary" : "Get an order by ID",
        "description" : "This endpoint allows you to retrieve a specific order by its ID.\n",
        "security" : [ {
          "hmac" : [ ]
        } ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the order to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The order has been successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "status" : {
                      "type" : "string",
                      "example" : "success"
                    },
                    "data" : {
                      "$ref" : "#/components/schemas/Order"
                    },
                    "message" : {
                      "type" : "string",
                      "example" : "The order has been successfully retrieved"
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/UnauthorizedError"
          },
          "404" : {
            "description" : "The order with the specified ID was not found"
          },
          "500" : {
            "description" : "An internal server error has occurred"
          }
        }
      }
    },
    "/provider/orders/{id}/accept" : {
      "post" : {
        "tags" : [ "Provider" ],
        "summary" : "Accept an order",
        "description" : "Accepts an order",
        "operationId" : "acceptOrder",
        "security" : [ {
          "hmac" : [ ]
        } ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the order to be accepted",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "bUhdxdnfaewr"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The order has been successfully accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "status" : {
                      "type" : "string",
                      "example" : "success"
                    },
                    "data" : {
                      "$ref" : "#/components/schemas/LPOrder"
                    },
                    "message" : {
                      "type" : "string",
                      "example" : "The order has been successfully accepted"
                    }
                  },
                  "example" : {
                    "id" : "bUhdxdnfaewr",
                    "amount" : 2500,
                    "token" : "USDT",
                    "network" : "polygon",
                    "recipient" : {
                      "institution" : "ABNGNGLA",
                      "accountIdentifier" : "1234567890",
                      "accountName" : "John Doe"
                    },
                    "createdAt" : "2023-03-30T08:00:00Z",
                    "updatedAt" : "2023-03-30T08:00:00Z",
                    "status" : "processing"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "422" : {
            "description" : "The specified order is already assigned to a different provider\n"
          },
          "401" : {
            "$ref" : "#/components/responses/UnauthorizedError"
          },
          "404" : {
            "description" : "The order with the specified ID was not found"
          }
        }
      }
    },
    "/provider/orders/{id}/decline" : {
      "post" : {
        "tags" : [ "Provider" ],
        "summary" : "Decline an order",
        "description" : "Declines an order",
        "operationId" : "declineOrder",
        "security" : [ {
          "hmac" : [ ]
        } ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the order to be declined",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "bUhdxdnfaewr"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The order has already been successfully declined",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "status" : {
                      "type" : "string"
                    },
                    "data" : {
                      "type" : "object"
                    },
                    "message" : {
                      "type" : "string"
                    }
                  },
                  "example" : {
                    "status" : "success",
                    "data" : null,
                    "message" : "The order has been successfully declined"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "422" : {
            "description" : "Something went wrong!"
          },
          "401" : {
            "$ref" : "#/components/responses/UnauthorizedError"
          },
          "404" : {
            "description" : "The order with the specified ID was not found"
          }
        }
      }
    },
    "/provider/orders/{id}/cancel" : {
      "post" : {
        "tags" : [ "Provider" ],
        "summary" : "Cancel an order",
        "description" : "Cancels an order",
        "operationId" : "cancelOrder",
        "security" : [ {
          "hmac" : [ ]
        } ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the order to be cancelled",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "bUhdxdnfaewr"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The order has already been successfully canceled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "status" : {
                      "type" : "string"
                    },
                    "data" : {
                      "type" : "object"
                    },
                    "message" : {
                      "type" : "string"
                    }
                  },
                  "example" : {
                    "status" : "success",
                    "data" : null,
                    "message" : "The order has been successfully cancelled"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "422" : {
            "description" : "Something went wrong!"
          },
          "401" : {
            "$ref" : "#/components/responses/UnauthorizedError"
          },
          "404" : {
            "description" : "The order with the specified ID was not found"
          }
        }
      }
    },
    "/provider/orders/{id}/fulfill" : {
      "post" : {
        "tags" : [ "Provider" ],
        "summary" : "Fulfill an order",
        "description" : "Fulfills an order",
        "operationId" : "fulfillOrder",
        "security" : [ {
          "hmac" : [ ]
        } ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the order to be fulfilled",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "bUhdxdnfaewr"
          }
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LPOrderFulfillment"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The order has been successfully fulfilled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "status" : {
                      "type" : "string"
                    },
                    "data" : {
                      "type" : "object"
                    },
                    "message" : {
                      "type" : "string"
                    }
                  },
                  "example" : {
                    "status" : "success",
                    "data" : null,
                    "message" : "The order has been successfully fulfilled"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "422" : {
            "description" : "Something went wrong!"
          },
          "401" : {
            "$ref" : "#/components/responses/UnauthorizedError"
          },
          "404" : {
            "description" : "The order with the specified ID was not found"
          }
        }
      }
    },
    "/currencies" : {
      "get" : {
        "tags" : [ "Misc" ],
        "summary" : "List of supported fiat currencies",
        "operationId" : "getSupportedCurrencies",
        "responses" : {
          "200" : {
            "description" : "List of supported fiat currencies",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "status" : {
                      "type" : "string"
                    },
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/Currency"
                      }
                    }
                  }
                },
                "example" : {
                  "status" : "success",
                  "data" : [ {
                    "code" : "NGN",
                    "name" : "Nigerian Naira",
                    "shortName" : "Naira",
                    "decimals" : 2,
                    "symbol" : "₦",
                    "marketRate" : 840.0
                  }, {
                    "code" : "KES",
                    "name" : "Kenyan Shilling",
                    "shortName" : "Shilling",
                    "decimals" : 2,
                    "symbol" : "KSh",
                    "marketRate" : 550.0
                  } ],
                  "message" : "OK"
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/institutions/{currency_code}" : {
      "get" : {
        "tags" : [ "Misc" ],
        "summary" : "Get supported institutions for a fiat currency",
        "description" : "Returns a list of supported financial institutions for a fiat currency.\n",
        "parameters" : [ {
          "name" : "currency_code",
          "in" : "path",
          "description" : "The code of a supported fiat currency.",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "NGN"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "status" : {
                      "type" : "string"
                    },
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "name" : {
                            "type" : "string"
                          },
                          "code" : {
                            "type" : "string",
                            "description" : "The protocol's unique code for the institution\n"
                          },
                          "type" : {
                            "type" : "string",
                            "enum" : [ "BANK", "MOBILE_MONEY" ]
                          }
                        }
                      }
                    }
                  },
                  "example" : {
                    "status" : "success",
                    "data" : [ {
                      "name" : "ACCESS BANK PLC",
                      "code" : "ABNGNGLA",
                      "type" : "BANK"
                    }, {
                      "name" : "M-PESA",
                      "code" : "MPESAKSA",
                      "type" : "MOBILE_MONEY"
                    } ],
                    "message" : null
                  }
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/rates/{token}/{amount}/{fiat}" : {
      "get" : {
        "tags" : [ "Misc" ],
        "summary" : "Get fiat rate for a currency pair",
        "description" : "Returns the exchange rate of a cryptocurrency symbol in \nvarious fiat currencies. No authorization needed\n",
        "operationId" : "getRates",
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "The symbol of a supported cryptocurrency.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "USDC", "USDT", "DAI" ]
          }
        }, {
          "name" : "amount",
          "in" : "path",
          "description" : "The amount of the cryptocurrency.",
          "required" : true,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "fiat",
          "in" : "path",
          "description" : "The symbol of a fiat cryptocurrency.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "NGN", "KES" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the current exchange rate for the token-fiat pair\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "status" : {
                      "type" : "string"
                    },
                    "data" : {
                      "type" : "number"
                    }
                  }
                },
                "example" : {
                  "status" : "success",
                  "data" : 950.3,
                  "message" : "Rates fetched successfully"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/provider/rates/{token}/{fiat}" : {
      "get" : {
        "tags" : [ "Provider" ],
        "summary" : "Get the market rate for a currency pair",
        "description" : "Returns the exchange rate of a cryptocurrency token in \nthe target fiat currency.\n",
        "operationId" : "getMarketRate",
        "security" : [ {
          "hmac" : [ ]
        } ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "The symbol of a supported cryptocurrency.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "USDC", "USDT", "DAI" ]
          }
        }, {
          "name" : "fiat",
          "in" : "path",
          "description" : "The symbol of a fiat cryptocurrency.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "NGN", "KES" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the market rate\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "status" : {
                      "type" : "string"
                    },
                    "data" : {
                      "type" : "number"
                    }
                  }
                },
                "example" : {
                  "status" : "success",
                  "data" : 950.3,
                  "message" : "Rate fetched successfully"
                }
              }
            }
          },
          "400" : {
            "description" : "Returned when there is an error in either amount, token or fiat",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/responses/TokenNotSupportedError"
                  }, {
                    "$ref" : "#/components/responses/FiatNotSupportedError"
                  }, {
                    "$ref" : "#/components/responses/InvalidAmountError"
                  } ]
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/UnauthorizedError"
          }
        }
      }
    }
  },
  "components" : {
    "securitySchemes" : {
      "api_key" : {
        "type" : "apiKey",
        "name" : "API-Key",
        "in" : "header",
        "description" : "API key required to access the endpoints."
      },
      "hmac" : {
        "type" : "apiKey",
        "name" : "HMAC",
        "in" : "header",
        "description" : "HMAC signature computed using the request payload and secret key. Format: HMAC <client_id>:<signature>"
      }
    },
    "schemas" : {
      "Currency" : {
        "type" : "object",
        "required" : [ "code", "name", "shortName", "symbol", "decimals" ],
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "The currency code (e.g. 'NGN' for Nigerian Naira)"
          },
          "name" : {
            "type" : "string",
            "description" : "The currency name (e.g. 'Nigerian Naira')"
          },
          "shortName" : {
            "type" : "string",
            "description" : "The currency short name or symbol (e.g. 'Naira' for Nigerian Naira)\n"
          },
          "decimals" : {
            "type" : "integer",
            "description" : "The number of decimal places used by the currency \n(e.g. 2 for Nigerian Naira)\n"
          },
          "symbol" : {
            "type" : "string",
            "description" : "The currency symbol (e.g. '₦' for Nigerian Naira)"
          }
        },
        "example" : [ {
          "code" : "NGN",
          "name" : "Nigerian Naira",
          "shortName" : "Naira",
          "decimals" : 2,
          "symbol" : "₦"
        } ]
      },
      "Status" : {
        "type" : "string",
        "enum" : [ "pending", "expired", "initiated", "reverted", "settled", "refunded" ]
      },
      "PaymentOrderRecipient" : {
        "type" : "object",
        "required" : [ "institution", "accountIdentifier", "accountName" ],
        "properties" : {
          "institution" : {
            "type" : "string",
            "description" : "Name of bank/institution"
          },
          "accountIdentifier" : {
            "type" : "string",
            "description" : "Account number/IBAN/etc"
          },
          "accountName" : {
            "type" : "string",
            "description" : "Name on the account"
          },
          "providerId" : {
            "type" : "string",
            "description" : "ID of the provider"
          },
          "memo" : {
            "type" : "string",
            "description" : "Optional memo/reference"
          }
        }
      },
      "NewOrder" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "description" : "The amount of cryptocurrency to be exchanged",
            "minimum" : 10
          },
          "token" : {
            "type" : "string",
            "description" : "The cryptocurrency token being transferred",
            "enum" : [ "USDC", "USDT", "DAI" ]
          },
          "rate" : {
            "type" : "string",
            "description" : "The fiat amount for one unit of the token"
          },
          "network" : {
            "type" : "string",
            "description" : "The network on which the order was executed",
            "enum" : [ "polygon", "bnb-smart-chain", "arbitrum", "base" ]
          },
          "recipient" : {
            "$ref" : "#/components/schemas/OrderRecipient"
          }
        },
        "required" : [ "amount", "token", "network", "recipient" ],
        "example" : {
          "amount" : 2500,
          "token" : "USDC",
          "rate" : 950,
          "network" : "polygon",
          "recipient" : {
            "institution" : "ABNGNGLA",
            "accountIdentifier" : "1234567890",
            "accountName" : "John Doe",
            "providerId" : "XDur5ECY",
            "memo" : "From Chioma Uzor: for rent"
          }
        }
      },
      "Order" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "amount" : {
            "type" : "number",
            "description" : "The amount of cryptocurrency to be exchanged",
            "minimum" : 10
          },
          "token" : {
            "type" : "string",
            "description" : "The cryptocurrency token to be off-ramped",
            "enum" : [ "USDC", "USDT", "DAI" ]
          },
          "rate" : {
            "type" : "string",
            "description" : "The fiat amount for one unit of the token"
          },
          "recipient" : {
            "$ref" : "#/components/schemas/OrderRecipient"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "initiated", "reverted", "expired", "pending", "settled", "refunded" ]
          },
          "network" : {
            "type" : "string",
            "description" : "The network on which the order was executed",
            "enum" : [ "polygon", "bnb-smart-chain", "arbitrum", "base" ]
          },
          "txHash" : {
            "type" : "string",
            "description" : "The order hash of the order"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The ISO 8601 timestamp when the order was created"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The ISO 8601 timestamp when the order was last updated"
          }
        },
        "example" : {
          "id" : "bUhdxdnfaewr",
          "amount" : 2500,
          "token" : "USDC",
          "rate" : 950,
          "network" : "polygon",
          "recipient" : {
            "institution" : "ABNGNGLA",
            "accountIdentifier" : "1234567890",
            "accountName" : "John Doe",
            "providerId" : "XDur5ECY",
            "memo" : "From Chioma Uzor: for rent"
          },
          "createdAt" : "2023-03-30T08:00:00Z",
          "updatedAt" : "2023-03-30T08:00:00Z",
          "txHash" : "0xa78c6280789f13a57ed0f2332e2627g19175d5524963a4651c09f5c2707g",
          "status" : "pending"
        }
      },
      "OrderRecipient" : {
        "type" : "object",
        "properties" : {
          "institution" : {
            "type" : "string",
            "description" : "The code of the destination institution"
          },
          "accountIdentifier" : {
            "type" : "string",
            "description" : "The destination account identifier e.g bank account number \nor mobile number\n"
          },
          "accountName" : {
            "type" : "string",
            "description" : "The name on the destination account"
          },
          "providerId" : {
            "type" : "string",
            "description" : "The unique ID of the liquidity provider"
          },
          "memo" : {
            "type" : "string",
            "description" : "An arbitrary description of the order"
          }
        },
        "required" : [ "institution", "accountIdentifier", "accountName" ],
        "example" : {
          "institution" : "ABNGNGLA",
          "accountIdentifier" : "1234567890",
          "accountName" : "John Doe",
          "providerId" : "XDur5ECY",
          "memo" : "From Chioma Uzor: for rent"
        }
      },
      "LPOrder" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "amount" : {
            "type" : "number",
            "description" : "The amount of cryptocurrency to be off-ramped",
            "minimum" : 10
          },
          "token" : {
            "type" : "string",
            "description" : "The cryptocurrency token to be off-ramped",
            "enum" : [ "USDC", "USDT", "DAI" ]
          },
          "recipient" : {
            "$ref" : "#/components/schemas/LPOrderRecipient"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "pending", "processing", "cancelled", "fulfilled", "validated", "settling", "settled", "refunding", "refunded" ]
          },
          "network" : {
            "type" : "string",
            "description" : "The network on which the order will be settled",
            "enum" : [ "polygon", "bnb-smart-chain", "arbitrum", "base" ]
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The ISO 8601 timestamp when the order was assigned to the Provider\n"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The ISO 8601 timestamp when the order was last updated\n"
          }
        },
        "required" : [ "amount", "token" ],
        "example" : {
          "id" : "bUhdxdnfaewr",
          "amount" : 2500,
          "network" : "polygon",
          "recipient" : {
            "institution" : "ABNGNGLA",
            "accountIdentifier" : "1234567890",
            "accountName" : "John Doe"
          },
          "createdAt" : "2023-03-30T08:00:00Z",
          "updatedAt" : "2023-03-30T08:00:00Z",
          "status" : "pending"
        }
      },
      "LPOrderRecipient" : {
        "type" : "object",
        "properties" : {
          "institution" : {
            "type" : "string",
            "description" : "The code of the destination institution"
          },
          "accountIdentifier" : {
            "type" : "string",
            "description" : "The destination account identifier e.g bank account number \nor mobile number\n"
          },
          "accountName" : {
            "type" : "string",
            "description" : "The name on the destination account"
          }
        },
        "required" : [ "institution", "accountIdentifier", "accountName" ],
        "example" : {
          "institution" : "ABNGNGLA",
          "accountIdentifier" : "1234567890",
          "accountName" : "John Doe"
        }
      },
      "LPOrderFulfillment" : {
        "type" : "object",
        "properties" : {
          "transactionId" : {
            "type" : "string"
          },
          "imageUrl" : {
            "type" : "string"
          },
          "institution" : {
            "type" : "string"
          }
        },
        "example" : {
          "transactionId" : "bUhdxdnfaewr",
          "imageUrl" : "https://cloudinary.com/images/9390143412340dkjaf143.jpeg",
          "institution" : "ABNGNGLA"
        }
      },
      "ProviderProfile" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Provider's ID"
          },
          "firstName" : {
            "type" : "string",
            "description" : "Provider's first name\n"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Provider's last name"
          },
          "email" : {
            "type" : "string",
            "description" : "Provider's email\n"
          },
          "tradingName" : {
            "type" : "string",
            "description" : "Provider's trading name"
          },
          "currency" : {
            "type" : "string",
            "description" : "Provider's supported currency\n"
          },
          "hostIdentifier" : {
            "type" : "string",
            "description" : "Provider's host identifier"
          },
          "isPartner" : {
            "type" : "boolean",
            "description" : "Returns partnership status of a provider\n"
          },
          "isAvailable" : {
            "type" : "boolean",
            "description" : "Provider's availability"
          },
          "isActive" : {
            "type" : "boolean",
            "description" : "Returns if a provider is active or not\n"
          },
          "address" : {
            "type" : "string",
            "description" : "Provider's address"
          },
          "mobileNumber" : {
            "type" : "string",
            "description" : "Provider's mobile number\n"
          },
          "businessName" : {
            "type" : "string",
            "description" : "Provider's business name"
          },
          "identity_type" : {
            "type" : "string",
            "description" : "Provider's identity type"
          },
          "identity_document" : {
            "type" : "string",
            "description" : "Provider's identity document URL\n"
          },
          "business_document" : {
            "type" : "string",
            "description" : "Provider's business document URL"
          },
          "dateOfBirth" : {
            "type" : "string",
            "description" : "Provider's date of birth\n"
          },
          "tokens" : {
            "type" : "object",
            "description" : "List of tokens supported by a provider\n"
          },
          "apiKey" : {
            "type" : "object",
            "description" : "Provider's api key\n"
          }
        },
        "required" : [ "firstName", "lastName", "email", "isAvailable", "business_document", "identity_document", "businessName", "identity_type", "isPartner", "tokens" ],
        "example" : {
          "id" : "1733453",
          "firstName" : "John",
          "lastName" : "Doe",
          "tradingName" : "John Doe Trading LTD",
          "email" : "johndoe@example.com",
          "currency" : "NGN",
          "hostIdentifier" : "https://provider.example.com",
          "isPartner" : false,
          "isAvailable" : true,
          "isActive" : true,
          "address" : "Unit 124, Provider Avenue, Billings Street, West Georgia, Abuja, Nigeria",
          "mobileNumber" : "08012345678",
          "dateOfBirth" : "1995-11-12",
          "businessName" : "John Doe Incorporated",
          "identity_type" : "Driver Licence",
          "identity_document" : "https://cloudinary.com/images/3456143412340dkjaf143.jpeg",
          "business_document" : "https://cloudinary.com/images/9390143412340dkjaf143.jpeg",
          "tokens" : {
            "id" : "123abc",
            "created_at" : "2023-02-15T19:53:05.469103Z",
            "updated_at" : "2023-02-15T19:53:05.469103Z",
            "symbol" : "USDC",
            "fixed_conversion_rate" : 450.5,
            "floating_conversion_rate" : "",
            "conversion_rate_type" : "fixed",
            "max_order_amount" : 10000,
            "min_order_amount" : 50,
            "address" : {
              "address" : "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
              "network" : "polygon"
            }
          },
          "apiKey" : {
            "id" : "6b7b2961-dc6f-4ee5-b65a-e003b6bd39da",
            "secret" : "e003b6bd39da"
          }
        }
      },
      "SenderProfile" : {
        "type" : "object",
        "properties" : {
          "webhookURL" : {
            "type" : "string"
          },
          "domainWhitelist" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "feePerTokenUnit" : {
            "type" : "string"
          },
          "feeAddress" : {
            "type" : "string"
          },
          "refundAddress" : {
            "type" : "string"
          }
        }
      },
      "Error" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the response. Will always be 'error'."
          },
          "data" : {
            "type" : "object",
            "description" : "Error payload."
          },
          "message" : {
            "type" : "string",
            "description" : "Error message indicating reason"
          }
        }
      }
    },
    "responses" : {
      "UnauthorizedError" : {
        "description" : "Unauthorized - Invalid API key",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "status" : "error",
              "message" : "Invalid API key",
              "data" : null
            }
          }
        }
      },
      "NotFoundError" : {
        "description" : "NotFound - Resource not found",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "status" : "error",
              "message" : "Resource was not found",
              "data" : null
            }
          }
        }
      },
      "BadRequestError" : {
        "description" : "Bad Request",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "status" : "error",
              "message" : "Malformed request",
              "data" : null
            }
          }
        }
      },
      "TokenNotSupportedError" : {
        "description" : "NotSupported - Token not supported",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "status" : "error",
              "message" : "Token is not supported",
              "data" : null
            }
          }
        }
      },
      "FiatNotSupportedError" : {
        "description" : "NotSupported - Fiat currency not supported",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "status" : "error",
              "message" : "Fiat currency not supported",
              "data" : null
            }
          }
        }
      },
      "InvalidAmountError" : {
        "description" : "InvalidAmout - Invalid amount",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "status" : "error",
              "message" : "Invalid amount",
              "data" : null
            }
          }
        }
      },
      "ProviderProfile" : {
        "description" : "Returns the provider profile\n",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "status" : {
                  "type" : "string"
                },
                "data" : {
                  "type" : "object"
                },
                "message" : {
                  "type" : "string"
                }
              }
            },
            "example" : {
              "status" : "success",
              "data" : {
                "id" : "1733453",
                "firstName" : "John",
                "lastName" : "Doe",
                "tradingName" : "John Doe Trading LTD",
                "email" : "johndoe@example.com",
                "currency" : "NGN",
                "hostIdentifier" : "https://provider.example.com",
                "isPartner" : false,
                "isAvailable" : true,
                "isActive" : true,
                "address" : "Unit 124, Provider Avenue, Billings Street, West Georgia, Abuja, Nigeria",
                "mobileNumber" : "08012345678",
                "dateOfBirth" : "1995-11-12",
                "businessName" : "John Doe Incorporated",
                "identity_type" : "Driver Licence",
                "identity_document" : "https://cloudinary.com/images/3456143412340dkjaf143.jpeg",
                "business_document" : "https://cloudinary.com/images/9390143412340dkjaf143.jpeg",
                "tokens" : [ {
                  "id" : "123abc",
                  "created_at" : "2023-02-15T19:53:05.469103Z",
                  "updated_at" : "2023-02-15T19:53:05.469103Z",
                  "symbol" : "USDC",
                  "fixed_conversion_rate" : 450.5,
                  "floating_conversion_rate" : "",
                  "conversion_rate_type" : "fixed",
                  "max_order_amount" : 10000,
                  "min_order_amount" : 50,
                  "address" : {
                    "address" : "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                    "network" : "polygon"
                  }
                } ],
                "apiKey" : {
                  "id" : "6b7b2961-dc6f-4ee5-b65a-e003b6bd39da",
                  "secret" : "e003b6bd39da"
                }
              },
              "message" : "Profile retrieved successfully"
            }
          }
        }
      }
    }
  }
}